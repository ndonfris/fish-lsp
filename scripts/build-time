#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Parse flags
const args = process.argv;
const flags = {
    quiet: args.includes('-q') || args.includes('--quiet'),
    verbose: args.includes('-v') || args.includes('--verbose'),
    help: args.includes('-h') || args.includes('--help'),
    noColor: args.includes('-n') || args.includes('--no-color'),
    color: args.includes('-c') || args.includes('--color'),
    forceSuccess: args.includes('-f') || args.includes('--force-success')
};

// Setup colors
const colors = {
    reset: '\x1b[0m', bold: '\x1b[1m', dim: '\x1b[2m', italic: '\x1b[3m', underline: '\x1b[4m', inverse: '\x1b[7m',
    black: '\x1b[30m', red: '\x1b[31m', green: '\x1b[32m', yellow: '\x1b[33m', blue: '\x1b[34m', magenta: '\x1b[35m', cyan: '\x1b[36m', white: '\x1b[37m', gray: '\x1b[90m',
    bgBlack: '\x1b[40m', bgRed: '\x1b[41m', bgGreen: '\x1b[42m', bgYellow: '\x1b[43m', bgBlue: '\x1b[44m', bgMagenta: '\x1b[45m', bgCyan: '\x1b[46m', bgWhite: '\x1b[47m',
};

Object.keys(colors).forEach(color => {
    String.prototype[color] = flags.noColor || color === 'reset'
        ? function () {return this.toString();}
        : function () {return `${colors[color]}${this}${colors.reset}`;};
});


// Handle conflicting flags
if (flags.color && flags.noColor) flags.help = true;

if (flags.help) {
    console.log(`Usage:`.reset().bold(), `yarn sh:build-time  [OPTIONS]
      ./scripts/build-time [OPTIONS]

${'Description:'.reset().bold()}
  This script creates a file in the 'out' directory with the current
  date and time for the most recent \`fish-lsp\` package's build.

${'Options:'.reset().bold()}
  -h, --help                 Show this help message
  -q, --quiet                Suppress output
  -v, --verbose              Enable verbose output
      --color                Enable colored output
  -n, --no-color             Disable colored output
  -f, --force-success        Force success exit code
`);
    process.exit(0);
}

const log = (...args) => !flags.quiet && console.log(...args);
const error = (...args) => !flags.quiet && console.error(...args);
const verbose = (...args) => flags.verbose && console.log(...args);
const exit = (code = 0) => process.exit(flags.forceSuccess ? 0 : code);

try {
    const now = new Date();
    const timeStr = `${now.toISOString().split('T')[0]} ${now.toLocaleTimeString()}`;
    const buildTimeData = {
        date: new Date().toDateString(),
        timestamp: new Date().toLocaleString(undefined, { dateStyle: 'short', timeStyle: 'medium' }),
        isoTimestamp: now.toISOString(),
        unix: Math.floor(now.getTime() / 1000),
        version: process.env.npm_package_version || 'unknown',
        nodeVersion: process.version
    };
    
    const scriptDir = path.dirname(path.resolve(__filename));
    const outDir = scriptDir.endsWith('scripts') ? path.join(path.dirname(scriptDir), 'out') : path.join(scriptDir, 'out');
    const jsonFilePath = path.join(outDir, 'build-time.json');
    const txtFilePath = path.join(outDir, 'build-time.txt');

    verbose();
    verbose('>>> begin executing verbose build-time script <<<'.white().dim().italic());
    verbose('\n', ' --verbose '.bgGreen().black().bold(), 'enabled!'.green().bold(), '\n');
    verbose(' filePath: '.green().bold(), path.resolve(__filename).blue().bold());

    // Create directory and files
    fs.mkdirSync(outDir, {recursive: true});
    if (!fs.existsSync(outDir)) {
        error("ERROR:".bgRed().white().bold(), "Failed to access 'out' directory.".red());
        exit(1);
    }

    // Write JSON file (new format)
    fs.writeFileSync(jsonFilePath, JSON.stringify(buildTimeData, null, 2));
    
    // Write legacy txt file for backwards compatibility
    fs.writeFileSync(txtFilePath, timeStr + '\n');

    if (!fs.existsSync(jsonFilePath) || !fs.existsSync(txtFilePath)) {
        error("ERROR:".bgRed().white().bold(), "Failed to write build time files.".red());
        exit(1);
    }

    if (flags.verbose) {
        verbose(' ✓ build-time script executed successfully!'.green().bold());
        verbose(' ✓ created JSON file:'.green().bold(), jsonFilePath.cyan());
        verbose(' ✓ created TXT file:'.green().bold(), txtFilePath.cyan());
        verbose(' ✓ relative filepath:'.green().bold(), path.relative(process.cwd(), jsonFilePath).cyan());
        verbose(' content:'.green().black().bold(), JSON.stringify(buildTimeData, null, 2).blue().bold());
        verbose(' last modified:'.green().black().bold(), fs.statSync(jsonFilePath).mtime.toLocaleString().blue().dim());
        verbose();
        verbose('>>> end executing verbose build-time script <<<'.white().dim().italic());
        verbose();
    }

    log(' ✓ created JSON at:'.bgGreen().black().bold(), path.basename(jsonFilePath).cyan().dim());
    log(' ✓ created TXT at: '.bgGreen().black().bold(), path.basename(txtFilePath).cyan().dim());
    log(' ✓ with timestamp: '.bgGreen().black().bold(), timeStr.blue().dim());

} catch (error) {
    error("ERROR:".bgRed().white().bold(), "Script execution failed.".red());
    flags.verbose && console.error('Details:'.bgRed().white().bold(), error.message.red());
    exit(1);
}
