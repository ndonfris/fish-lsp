#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export const colors = {
  // Basic colors
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  
  // Text colors
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  gray: '\x1b[90m',
  
  // Background colors
  bgRed: '\x1b[41m',
  bgGreen: '\x1b[42m',
  bgYellow: '\x1b[43m',
  bgBlue: '\x1b[44m',
  bgMagenta: '\x1b[45m',
  bgCyan: '\x1b[46m',
  bgWhite: '\x1b[47m',
}

// Check if we should use colors (respects NO_COLOR env var and TTY detection)
// const shouldUseColors = !process.env.NO_COLOR && process.stdout.isTTY;

function colorize(text, color) {
  // if (!shouldUseColors) return text;
  return `${color}${text}${colors.reset}`;
}


// Get the current date and time in YYYY-MM-DD HH:MM:SS format
function getCurrentDateTime() {
  const now = new Date();
  
  // Format date as YYYY-MM-DD
  const date = now.toISOString().split('T')[0];
  
  // Format time as HH:MM:SS
  const time = now.toTimeString().split(' ')[0];
  
  return `${date} ${time}`;
}

// Ensure the output directory exists
function ensureOutDirExists() {
  const outDir = path.resolve(__dirname, '../out');
  if (!fs.existsSync(outDir)) {
    fs.mkdirSync(outDir, { recursive: true });
  }
  return outDir;
}

// Ensure the lib directory exists
function ensureLibDirExists() {
  const libDir = path.resolve(__dirname, '../lib');
  if (!fs.existsSync(libDir)) {
    fs.mkdirSync(libDir, { recursive: true });
  }
  return libDir;
}

// Write the build time to a file
function writeBuildTime() {
  const outDir = ensureOutDirExists();
  const libDir = ensureLibDirExists();
  const buildTime = getCurrentDateTime();
  
  // Write to both out/ and lib/ directories
  const files = [
    path.join(outDir, 'build-time.txt'),
    path.join(libDir, 'build-time.txt')
  ];
  
  try {
    files.forEach(file => {
      fs.writeFileSync(file, `${buildTime}\n`);
    });
    console.log(`${colorize('ÔêÆ Build time recorded:', colors.green)} ${colorize(buildTime, colors.blue)}`);
  } catch (error) {
    console.error(colorize(`Error writing build time: ${error.message}`, colors.red));
    process.exit(1);
  }
}

// Execute the script
writeBuildTime();
