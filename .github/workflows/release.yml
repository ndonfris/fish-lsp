name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.11)'
        required: true
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install Fish Shell
        uses: fish-actions/install-fish@v1.2.0
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install Yarn
        shell: fish {0}
        run: npm install -g yarn@1.22.22
        
      - name: Install Dependencies
        shell: fish {0}
        run: yarn install
        
      - name: Extract Version Info
        id: version
        shell: bash
        run: |
          # Get tag name from either push event or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi
          
          # Remove 'v' prefix
          VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
          
          # Determine if this is a prerelease
          if echo "$VERSION" | grep -qE "(pre|alpha|beta|rc|nightly)"; then
            IS_PRERELEASE="true"
            # Determine npm dist-tag
            if echo "$VERSION" | grep -q "pre"; then
              NPM_TAG="preminor"
            elif echo "$VERSION" | grep -q "nightly"; then
              NPM_TAG="nightly"
            else
              NPM_TAG="prerelease"
            fi
          else
            IS_PRERELEASE="false"
            NPM_TAG="latest"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "npm_tag=$NPM_TAG" >> $GITHUB_OUTPUT
          
          echo "Release Info:"
          echo "  Version: $VERSION"
          echo "  Tag: $TAG_NAME"
          echo "  Prerelease: $IS_PRERELEASE"
          echo "  NPM Tag: $NPM_TAG"
          
      - name: Update Package Version
        shell: fish {0}
        run: npm pkg set version=${{ steps.version.outputs.version }}
        
      - name: Build Production with Source Maps
        shell: fish {0}
        env:
          FISH_LSP_SOURCEMAPS: 'true'
        run: npm run build:prod
        
      - name: Verify Build Artifacts
        shell: fish {0}
        run: |
          echo "Checking build artifacts..."
          ls -la dist/ lib/
          
          # Verify binary works
          ./dist/fish-lsp --version
          
          # Verify source maps exist
          test -f dist/fish-lsp.map && echo "✅ Binary source map found"
          test -f lib/server.js.map && echo "✅ Library source map found"
          test -f lib/fish-lsp-web.js.map && echo "✅ Web source map found"
          
      - name: Package Source Maps
        shell: fish {0}
        run: |
          echo "Packaging source maps..."
          tar -czf fish-lsp-sourcemaps-${{ steps.version.outputs.version }}.tar.gz \
            -C dist fish-lsp.map \
            -C ../lib server.js.map fish-lsp-web.js.map
            
          # Create verification checksums
          sha256sum dist/fish-lsp > fish-lsp-${{ steps.version.outputs.version }}.sha256
          sha256sum fish-lsp-sourcemaps-${{ steps.version.outputs.version }}.tar.gz >> fish-lsp-${{ steps.version.outputs.version }}.sha256
          
          echo "Source maps package contents:"
          tar -tzf fish-lsp-sourcemaps-${{ steps.version.outputs.version }}.tar.gz
          
      - name: Generate Release Notes
        id: release_notes
        shell: bash
        run: |
          # Extract changelog section for this version
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 fish-lsp v${VERSION}
          
          ### Installation
          
          **Binary (Recommended)**
          \`\`\`bash
          # Download and install binary
          curl -fsSL https://github.com/ndonfris/fish-lsp/releases/download/${{ steps.version.outputs.tag_name }}/fish-lsp -o fish-lsp
          chmod +x fish-lsp
          sudo mv fish-lsp /usr/local/bin/
          \`\`\`
          
          **NPM**
          \`\`\`bash
          npm install -g fish-lsp@${{ steps.npm_tag.outputs.npm_tag }}
          \`\`\`
          
          ### Debugging
          
          For detailed TypeScript stack traces, download source maps:
          \`\`\`bash
          # Using CLI (if available)
          fish-lsp debug enable
          
          # Manual download
          curl -fsSL https://github.com/ndonfris/fish-lsp/releases/download/${{ steps.version.outputs.tag_name }}/fish-lsp-sourcemaps-${VERSION}.tar.gz | tar -xz
          \`\`\`
          
          ### Verification
          
          Verify downloads with checksums:
          \`\`\`bash
          curl -fsSL https://github.com/ndonfris/fish-lsp/releases/download/${{ steps.version.outputs.tag_name }}/fish-lsp-${VERSION}.sha256
          \`\`\`
          EOF
          
          # Output for GitHub release
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: fish-lsp ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ steps.version.outputs.is_prerelease }}
          
      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/fish-lsp
          asset_name: fish-lsp
          asset_content_type: application/octet-stream
          
      - name: Upload Source Maps
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./fish-lsp-sourcemaps-${{ steps.version.outputs.version }}.tar.gz
          asset_name: fish-lsp-sourcemaps-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./fish-lsp-${{ steps.version.outputs.version }}.sha256
          asset_name: fish-lsp-${{ steps.version.outputs.version }}.sha256
          asset_content_type: text/plain
          
      - name: Publish to NPM
        shell: fish {0}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing to NPM with tag: ${{ steps.version.outputs.npm_tag }}"
          
          # Publish to npm
          npm publish --tag ${{ steps.version.outputs.npm_tag }} --access public
          
          # For prerelease versions, also tag as nightly if it's a pre release
          if test "${{ steps.version.outputs.npm_tag }}" = "preminor"
            npm dist-tag add fish-lsp@${{ steps.version.outputs.version }} nightly
            echo "✅ Also tagged as 'nightly'"
          end
          
          echo "✅ Published fish-lsp@${{ steps.version.outputs.version }} with tag '${{ steps.version.outputs.npm_tag }}'"
          
      - name: Summary
        shell: fish {0}
        run: |
          echo "🎉 Release Complete!"
          echo ""
          echo "📦 Version: ${{ steps.version.outputs.version }}"
          echo "🏷️  Tag: ${{ steps.version.outputs.tag_name }}"
          echo "📋 Prerelease: ${{ steps.version.outputs.is_prerelease }}"
          echo "📝 NPM Tag: ${{ steps.version.outputs.npm_tag }}"
          echo ""
          echo "🔗 Release URL: ${{ steps.create_release.outputs.html_url }}"
          echo ""
          echo "Assets uploaded:"
          echo "  ✅ fish-lsp binary"
          echo "  ✅ Source maps package"
          echo "  ✅ SHA256 checksums"
          echo "  ✅ NPM package"